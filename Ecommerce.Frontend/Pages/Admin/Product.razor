@page "/product"
@page "/product/{id:int}"
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

@inject IProductoService productoService;
@inject ICategoriaService categoriaService
@inject IToastService toastService;
@inject NavigationManager _navService;

@attribute [Authorize(Roles = "Administrador")];

<body id="page-top">
    <div id="wrapper">

        <Ecommerce.Frontend.Shared.AdminLateralMenu />

        <div id="content-wrapper" class="d-flex flex-column">
            <div id="content">

                <Ecommerce.Frontend.Shared.AdminNavMenu />

                <div class="container-fluid">

                    <!-- Page Heading -->
                    <h1 class="h3 mb-2 text-gray-800">@titulo</h1>
                    <p class="mb-4">
                        Cree o modifique un producto
                    </p>

                    <!-- Category Table -->
                    <RadzenTemplateForm Data="@modelo">
                        <RadzenStack>
                            <RadzenFieldset Text="Producto">
                                <RadzenStack Gap="1rem">
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="1">
                                            <RadzenLabel Text="Nombre" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenTextBox Style="width: 30%;" @bind-Value="@modelo.Nombre" Placeholder="Nombre" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="1">
                                            <RadzenLabel Text="Descripción" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenTextArea Style="width: 30%;" @bind-Value="@modelo.Descripcion" Placeholder="Descripción" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="1">
                                            <RadzenLabel Text="Precio" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric ShowUpDown="false" Style="width: 30%;" @bind-Value="@modelo.Precio" Placeholder="Precio" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="1">
                                            <RadzenLabel Text="Precio de Oferta" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric ShowUpDown="false" Style="width: 30%;" @bind-Value="@modelo.PrecioOferta" Placeholder="PrecioOferta" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="1">
                                            <RadzenLabel Text="Cantidad" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric Style="width: 30%;" @bind-Value="@modelo.Cantidad" Placeholder="Cantidad" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="1">
                                            <RadzenLabel Text="Imagen" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <div class="input-group mb-3">
                                                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
                                            </div>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenStack>
                            </RadzenFieldset>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Guardar" Click="@(() => SaveChanges())" />
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Icon="undo" Text="Volver" Click="@(() => BackToProducts())" />
                        </RadzenStack>
                    </RadzenTemplateForm>

                </div>
            </div>
        </div>
    </div>
</body>

@code {
    [Parameter] public int Id { get; set; }
    private string titulo = "Nuevo Producto";
    private string boton = "Crear";
    private List<CategoriaDTO> listaCategoria = new List<CategoriaDTO>();
    private ProductoDTO modelo = new ProductoDTO();

    void CambiarCategoria(ChangeEventArgs e)
    {
        modelo.IdCategoria = Convert.ToInt32(e.Value.ToString());
    }

    protected override async Task OnInitializedAsync()
    {

        var response = await categoriaService.List("");
        if (response.IsCorrect)
        {
            listaCategoria = (List<CategoriaDTO>)response.Result!;
            if (listaCategoria.Any() && Id == 0)
                modelo.IdCategoria = listaCategoria.First().IdCategoria;
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        System.IO.FileInfo fileInfo = new(e.File.Name);
        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {

            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            modelo.Imagen = imageData;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            titulo = "Editar Producto";
            boton = "Actualizar";

            var response = await productoService.Get(Id);
            if (response.IsCorrect!)
            {
                modelo = (ProductoDTO)response.Result!;
            }
            else
                toastService.ShowWarning(response.Message!);
        }
    }

    private async Task SaveChanges()
    {

        bool respuesta = true;
        string mensaje = string.Empty;



        if (Id != 0)
        {
            var response = await productoService.Edit(modelo);
            if (response.IsCorrect)
                mensaje = "Producto fue modificado";
            else
            {
                respuesta = false;
                mensaje = "No se pudo editar";
            }
        }
        else
        {
            var response = await productoService.Create(modelo);
            if (response.IsCorrect)
                mensaje = "Producto fue creado";
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }

        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navService.NavigateTo("/products");
        }
        else
            toastService.ShowError(mensaje);
    }

    private async Task BackToProducts()
    {
        _navService.NavigateTo("/products");
    }
}