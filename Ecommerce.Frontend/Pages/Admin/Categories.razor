@page "/categories"

@inject ICategoriaService categoriaService;
@inject IToastService toastService;
@inject SweetAlertService Swal;
@inject NavigationManager _navService;

@attribute [Authorize(Roles = "Administrador")];

<body id="page-top">
    <div id="wrapper">

        <Ecommerce.Frontend.Shared.AdminLateralMenu />

        <div id="content-wrapper" class="d-flex flex-column">
            <div id="content">

                <Ecommerce.Frontend.Shared.AdminNavMenu />

                <div class="container-fluid">

                    <!-- Page Heading -->
                    <h1 class="h3 mb-2 text-gray-800">Categorias</h1>
                    <p class="mb-4">
                        Desde aquí puede realizar la administración de categorias.
                    </p>

                    <!-- Create & Search -->
                    <div class="row justify-content-center  mt-3">
                        <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
                            <RadzenButton Click="@(() => GoToCreateCategory())" Text="Nueva categoria" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" />
                        </div>

                        <div class="col-sm-6 col-md-8 col-xl-9 mb-4">
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" placeholder="Buscar categoria..." @bind-value="buscar">
                                <button class="btn btn-outline-secondary" type="button" @onclick="(async()=> await ObtenerCategorias(buscar))">
                                    <i class="oi oi-magnifying-glass"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Categories Table -->
                    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                    Data="@categories" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedCategories>
                        <Columns>
                            <RadzenDataGridColumn TItem="CategoriaDTO" Property="IdCategoria" Filterable="false" Title="# Id" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn TItem="CategoriaDTO" Property="Nombre" Title="Nombre" Frozen="true" Width="150px" />
                            <RadzenDataGridColumn TItem="CategoriaDTO" Title="Acción" Width="150px">
                                <Template Context="context">
                                    <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/category/@context.IdCategoria"><i class="oi oi-pencil fs-5"></i></a>
                                    <button class="col-5 btn btn-sm btn-outline-danger mt-auto" type="button" @onclick="(async () => await Eliminar(context))">
                                        <i class="oi oi-trash fs-5"></i>
                                    </button>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </div>
    </div>
</body>


@code {
    private string buscar = "";
    IEnumerable<CategoriaDTO> categories;
    IList<CategoriaDTO> selectedCategories;

    private async Task ObtenerCategorias(string Valor = "")
    {
        var response = await categoriaService.List(Valor);

        if (response.IsCorrect)
        {
            categories = (List<CategoriaDTO>)response.Result!;
        }
        else
        {
            categories = new List<CategoriaDTO>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerCategorias();
        selectedCategories = new List<CategoriaDTO>() { categories.FirstOrDefault() };
    }

    private async Task Eliminar(CategoriaDTO modelo)
    {

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar categoria: {modelo.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var response = await categoriaService.Delete(modelo.IdCategoria);

            if (response.IsCorrect)
            {
                await ObtenerCategorias();
                toastService.ShowSuccess("Categoria fue eliminado");
            }
            else
                toastService.ShowSuccess(response.Message!);
        }
    }

    private async Task GoToCreateCategory()
    {
        _navService.NavigateTo("/category");
    }
}
