@page "/products"

@inject IProductoService productoService;
@inject IToastService toastService;
@inject NavigationManager _navService;
@inject SweetAlertService Swal;
@inject NavigationManager _navService;

@attribute [Authorize(Roles = "Administrador")];

<body id="page-top">
    <div id="wrapper">

        <Ecommerce.Frontend.Shared.AdminLateralMenu />

        <div id="content-wrapper" class="d-flex flex-column">
            <div id="content">

                <Ecommerce.Frontend.Shared.AdminNavMenu />

                <div class="container-fluid">

                    <!-- Page Heading -->
                    <h1 class="h3 mb-2 text-gray-800">Productos</h1>
                    <p class="mb-4">
                        Desde aquí puede realizar la administración de productos.
                    </p>

                    <!-- Create & Search -->
                    <div class="row justify-content-center  mt-3">
                        <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
                            <RadzenButton Click="@(() => GoToCreateProduct())" Text="Nuevo producto" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" />
                        </div>

                        <div class="col-sm-6 col-md-8 col-xl-9 mb-4">
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" placeholder="Buscar producto..." @bind-value="buscar">
                                <button class="btn btn-outline-secondary" type="button" @onclick="(async()=> await GetProductos(buscar))">
                                    <i class="oi oi-magnifying-glass"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Products Table -->
                    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                    Data="@productos" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedProductos>
                        <Columns>
                            <RadzenDataGridColumn TItem="ProductoDTO" Property="IdProducto" Filterable="false" Title="# Id" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn TItem="ProductoDTO" Property="Nombre" Title="Nombre" Frozen="true" Width="150px" />
                            <RadzenDataGridColumn TItem="ProductoDTO" Property="Descripcion" Title="Descripción" Width="150px" />
                            <RadzenDataGridColumn TItem="ProductoDTO" Property="IdCategoriaNavigation.Nombre" Title="Categoría" Width="150px" />
                            <RadzenDataGridColumn TItem="ProductoDTO" Property="Precio" Title="Precio" Width="150px">
                                <Template Context="context">$@context.Precio</Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ProductoDTO" Property="PrecioOferta" Title="Precio de oferta" Width="150px">
                                <Template Context="context">$@context.PrecioOferta</Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ProductoDTO" Property="Cantidad" Title="Cantidad" Width="150px" />
                            <RadzenDataGridColumn TItem="ProductoDTO" Title="Acción" Width="150px">
                                <Template Context="context">
                                    <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/product/@context.IdProducto"><i class="oi oi-pencil fs-5"></i></a>
                                    <button class="col-5 btn btn-sm btn-outline-danger mt-auto" type="button" @onclick="(async () => await Eliminar(context))">
                                        <i class="oi oi-trash fs-5"></i>
                                    </button>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>

                </div>
            </div>
        </div>
    </div>
</body>


@code {
    private string buscar = "";
    IEnumerable<ProductoDTO> productos;
    IList<ProductoDTO> selectedProductos;

    private async Task GetProductos(string Valor = "")
    {
        var response = await productoService.List(Valor);

        if (response.IsCorrect)
        {
            productos = (List<ProductoDTO>)response.Result!;
        }
        else
        {
            productos = new List<ProductoDTO>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetProductos();
        selectedProductos = new List<ProductoDTO>() { productos.FirstOrDefault() };
    }

    private async Task Eliminar(ProductoDTO modelo)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar producto: {modelo.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var response = await productoService.Delete(modelo.IdProducto);

            if (response.IsCorrect)
            {
                await GetProductos();
                toastService.ShowSuccess("Producto fue eliminado");
            }
            else
                toastService.ShowSuccess(response.Message!);
        }
    }

    private async Task GoToCreateProduct()
    {
        _navService.NavigateTo("/product");
    }
}