@page "/detail/{id:int}"
@using Ecommerce.DTO
@using Ecommerce.Frontend.Services.Contrat
@using Ecommerce.Frontend.Shared

@inject IProductoService productoServicio;
@inject ICarritoService carritoServicio

<head>
    <title>wishlist page</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="shortcut icon" type="image/x-icon" href="img/favicon.ico">
    <link href="https://fonts.googleapis.com/css?family=Playfair+Display:400,700,900" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Poppins:400,500,700,900" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="css/styles.css" rel="stylesheet">
</head>

<BreadCrumb BreadcrumbItems="@breadcrumbItems" />

<div class="container px-4 px-lg-5 my-5">
    @if (modelo != null)
    {
        <div class="row gx-4 gx-lg-5 align-items-center">
            <div class="col-md-6">
                <img class="card-img-top border-dark border-1" src="@modelo.Imagen" style="width:100%;">
            </div>
            <div class="col-md-6">
                <h1 class="display-5 fw-bolder">@modelo.Nombre</h1>
                <div class="fs-5 mb-5">
                    @if (modelo.PrecioOferta != 0 && modelo.PrecioOferta < modelo.Precio)
                    {
                        <span class="text-danger text-decoration-line-through">$ @modelo.Precio</span>
                        <span>$ @modelo.PrecioOferta</span>
                    }
                    else
                    {
                        <span>$ @modelo.Precio</span>
                    }
                </div>
                <p class="lead">@modelo.Descripcion</p>
                <div class="d-flex">
                    <input class="form-control text-center me-3" type="number" min="1" style="width:60px" @bind-value="cantidad">
                    <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await AgregarCarrito(modelo))">
                        <i class="bi-cart-fill me-1"></i>
                        Agregar al carrito
                    </button>
                    <a class="btn btn-outline-dark flex-shrink-0" href="/catalogue">
                        <i class="bi-cart-fill me-1"></i>
                        Volver
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    private ProductoDTO? modelo = null;
    private int cantidad = 1;
    private List<BreadCrumb.BreadcrumbItem> breadcrumbItems;

    protected override async Task OnInitializedAsync()
    {
        breadcrumbItems = new List<BreadCrumb.BreadcrumbItem>
        {
            new BreadCrumb.BreadcrumbItem { Text = "Home", Url = "/" },
            new BreadCrumb.BreadcrumbItem { Text = "Detail", Url = $"/detail/{Id}" }
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        var response = await productoServicio.Get(Id);
        if (response.IsCorrect)
            modelo = (ProductoDTO)response.Result!;
    }

    private async Task AgregarCarrito(ProductoDTO modelo)
    {
        decimal? precioFinal = (modelo.PrecioOferta != 0 && modelo.PrecioOferta < modelo.Precio) ? modelo.PrecioOferta : modelo.Precio;
        CarritoDTO carrito = new CarritoDTO()
            {
                Producto = modelo,
                Cantidad = cantidad,
                Precio = precioFinal,
                Total = Convert.ToDecimal(cantidad) * precioFinal
            };
        await carritoServicio.AddCarrito(carrito);
    }

}