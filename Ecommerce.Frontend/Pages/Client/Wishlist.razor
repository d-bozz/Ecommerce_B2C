@page "/wishlist"

@inject ICarritoService carritoServicio
@inject IWishlistService wishlistServicio
@inject IProductoService productoServicio
@inject IVentaService ventaServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject AuthenticationStateProvider authenticationStateProvider;


@using Ecommerce.Frontend.Shared
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;

<BreadCrumb BreadcrumbItems="@breadcrumbItems" />

<div class="cart-area table-area pt-110 pb-95 float-left w-100">
    <div class="container">
        <div class=" cart-wrapper float-left w-100">
            <div class="table-responsive">
                <table class="table product-table text-center">
                    <thead>
                        <tr>
                            <th class="table-remove text-uppercase">Eliminar</th>
                            <th class="table-image text-uppercase">Imagen</th>
                            <th class="table-p-name text-uppercase">Producto</th>
                            <th class="table-p-price text-uppercase">Precio</th>
                            <th class="table-p-qty text-uppercase">Stock</th>
                            <th class="table-total text-uppercase">Agregar al carrito</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (lista.Any())
                        {
                            foreach (var item in lista)
                            {
                                <tr>
                                    <td class="table-remove"><button><i class="material-icons" @onclick="(async () => await Eliminar(item.IdProducto))">delete</i></button></td>
                                    <td class="table-image"><a href="detail/@item.Producto.IdProducto"><img src="@item.Producto.Imagen" alt=""></a></td>
                                    <td class="table-p-name text-capitalize"><a href="@item.Producto.IdProducto">@item.Producto.Nombre</a></td>
                                    <td class="table-p-price"><p>$@item.Producto.PrecioOferta</p></td>
                                    <td class="table-p-qty">in stock</td>
                                    <td class="table-addtocart"><a href="cart_page.html" class="btn-primary btn" @onclick="(async () => await AgregarCarrito(item.IdProducto))">Add to cart</a></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr class="text-center">
                                <td colspan="6">
                                    <div class="alert alert-warning" role="alert">
                                        No hay productos en la lista de deseos
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<Footer />

@code {
    private List<WishlistDTO> lista = new List<WishlistDTO>();
    private ProductoDTO producto;
    private List<BreadCrumb.BreadcrumbItem> breadcrumbItems;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task GetWishlist(int idUsuario)
    {
        var response = await wishlistServicio.List(idUsuario);

        if (response.IsCorrect)
        {
            lista = (List<WishlistDTO>)response.Result!;
        }
        else
        {
            lista = new List<WishlistDTO>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        breadcrumbItems = new List<BreadCrumb.BreadcrumbItem>
        {
            new BreadCrumb.BreadcrumbItem { Text = "Home", Url = "/" },
            new BreadCrumb.BreadcrumbItem { Text = "Wishlist", Url = "/wishlist" }
        };

        var autenticacionState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var usuarioLogueado = autenticacionState.User;

        if (usuarioLogueado.Identity?.IsAuthenticated ?? false)
        {
            var idUsuario = usuarioLogueado.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (int.TryParse(idUsuario, out int idUsuarioInt))
            {
                await GetWishlist(idUsuarioInt);
            }
        }
    }

    private async Task Eliminar(int idProducto)
    {
        WishlistDTO producto = lista.First(i => i.IdProducto == idProducto);

        if (producto != null)
        {
            lista.Remove(producto);
            await wishlistServicio.Delete(producto.IdWishlist);
            toastService.ShowSuccess("Producto eliminado de la lista de deseos");
        }
    }

    private async Task AgregarCarrito(int idProducto)
    {
        var modelo = await productoServicio.Get(idProducto);
        decimal? precioFinal = (modelo.Result.PrecioOferta != 0 && modelo.Result.PrecioOferta < modelo.Result.Precio) ? modelo.Result.PrecioOferta : modelo.Result.Precio;
        CarritoDTO carrito = new CarritoDTO()
            {
                Producto = modelo.Result,
                Cantidad = 1,
                Precio = precioFinal,
                Total = precioFinal
            };
        await carritoServicio.AddCarrito(carrito);
        await Eliminar(idProducto);
        toastService.ShowSuccess("Producto agregado al carrito");
    }
}