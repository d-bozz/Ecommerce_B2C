@page "/cart"

@inject ICarritoService carritoServicio
@inject IVentaService ventaServicio
@inject IToastService toastService
@inject NavigationManager _navServicio

@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;


<div class="row">
    <!-- Productos en el carrito -->
    <div class="col-sm-8">
        <div class="card mb-3">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm bg-light table-bordered">
                        <thead class="table-dark">
                            <tr class="text-center">
                                <th>Imagen</th>
                                <th>Producto</th>
                                <th>Precio</th>
                                <th>Cantidad</th>
                                <th>Total</th>
                                <th>Eliminar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (lista.Any())
                            {
                                foreach (var item in lista)
                                {
                                    <tr class="text-center">
                                        <!-- Agregar la clase text-center aquí -->
                                        <td valign="middle">
                                            <img class="card-img-top" src="@item.Producto.Imagen" style="width:100px">
                                        </td>
                                        <td valign="middle">
                                            <a href="detalle/@item.Producto.IdProducto">
                                                @item.Producto.Nombre
                                            </a>
                                        </td>
                                        <td valign="middle">$@item.Precio</td>
                                        <td valign="middle" align="center">
                                            <div class="btn-group" role="group" aria-label="Basic outlined example">
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Disminuir(item.Producto.IdProducto))">
                                                    <i class="oi oi-minus"></i>
                                                </button>
                                                <input class="form-control" readonly="readonly" style="width:50px" @bind-value="item.Cantidad" />
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Aumentar(item.Producto.IdProducto))">
                                                    <i class="oi oi-plus"></i>
                                                </button>
                                            </div>
                                        </td>
                                        <td valign="middle">$@item.Total</td>
                                        <td valign="middle">
                                            <button type="button" class="btn btn-outline-dark" @onclick="(async () => await Eliminar(item.Producto.IdProducto))">
                                                <i class="oi oi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr class="text-center">
                                    <!-- Agregar la clase text-center aquí -->
                                    <td colspan="6">
                                        <div class="alert alert-warning" role="alert">
                                            No hay productos en el carrito
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Información de Pago -->
    <div class="col-sm-4">
        <div class="card mb-3">
            <div class="card-body">
                <!-- Subtotal -->
                <div class="d-flex justify-content-between">
                    <div class="fw-bold">Subtotal:</div>
                    <div>
                        @(string.Format("{0:C}", lista.Sum(i => i.Total)))
                    </div>
                </div>
                <hr />
                <!-- Envío -->
                <div class="d-flex justify-content-between">
                    <div class="fw-bold">Envío:</div>
                    <div>@(string.Format("{0:C}", envio))</div>
                </div>
                <hr />
                <!-- Total a pagar -->
                <div class="d-flex justify-content-between">
                    <div class="fw-bold">Total a pagar:</div>
                    <div>
                        @(string.Format("{0:C}", lista.Sum(i => i.Total) + envio))
                    </div>
                </div>
                <hr />
                <!-- Realizar Checkout -->
                <div class="mt-2">
                    <div class="d-grid gap-1">
                        <button class="btn btn-dark btn-lg" href="/checkout" disabled="@disabled">Realizar Checkout</button>
                    </div>
                </div>
                <!-- Mensaje de inicio de sesión -->
                <AuthorizeView>
                    <NotAuthorized>
                        <div class="alert alert-danger mt-2" role="alert">
                            Debe iniciar sesión para poder realizar la compra.
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>

    <!-- Cupon de descuento -->
        <div class="col-sm-5">
        <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Cupón de descuento</h5>
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Cupón de descuento" aria-label="Cupón de descuento" aria-describedby="button-addon2">
                    <button class="btn btn-dark btn-lg" type="button" id="button-addon2">Aplicar</button>
            </div>
        </div>
        </div>
    </div>
</div>


@code {
    private bool disabled = true;
    private List<CarritoDTO> lista = new List<CarritoDTO>();
    private decimal? TotalPagar = 0;
    private TarjetaDTO tarjeta = new TarjetaDTO();
    private int envio = 150;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        lista = await carritoServicio.ReturnCarrito();

        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            disabled = false;
        }
    }

    private void Disminuir(int id)
    {
        CarritoDTO item = lista.First(i => i.Producto.IdProducto == id);

        if (item.Cantidad - 1 > 0)
        {
            decimal? precioFinal = (item.Producto.PrecioOferta != 0 && item.Producto.PrecioOferta < item.Producto.Precio) ? item.Producto.PrecioOferta : item.Producto.Precio;

            item.Cantidad--;
            item.Total = item.Cantidad * precioFinal;
        }
    }

    private void Aumentar(int id)
    {
        CarritoDTO item = lista.First(i => i.Producto.IdProducto == id);

        decimal? precioFinal = (item.Producto.PrecioOferta != 0 && item.Producto.PrecioOferta < item.Producto.Precio) ? item.Producto.PrecioOferta : item.Producto.Precio;

        item.Cantidad++;
        item.Total = item.Cantidad * precioFinal;
    }

    private async Task Eliminar(int idProducto)
    {
        CarritoDTO producto = lista.First(i => i.Producto.IdProducto == idProducto);

        if (producto != null)
        {
            lista.Remove(producto);
            await carritoServicio.RemoveCarrito(idProducto);
        }
    }
    
    private async Task ProcesarPago()
    {

        if (lista.Count == 0)
        {
            toastService.ShowWarning("No se encontraron productos");
            return;
        }

        List<DetalleVentaDTO> detalle = new List<DetalleVentaDTO>();

        foreach (var item in lista)
        {
            detalle.Add(new DetalleVentaDTO()
                {
                    IdProducto = item.Producto.IdProducto,
                    Cantidad = item.Cantidad,
                    Total = item.Total
                });
        }

        var authState = await authenticationState;
        string idUsuario = authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).Single();

        VentaDTO modelo = new VentaDTO()
            {
                IdUsuario = Convert.ToInt32(idUsuario),
                Total = lista.Sum(i => i.Total),
                DetalleVenta = detalle
            };
        var response = await ventaServicio.Register(modelo);

        if(response.IsCorrect)
        {
            await carritoServicio.CleanCarrito();
            toastService.ShowSuccess("Venta registrada");
            _navServicio.NavigateTo("/catalogo");
        }
        else
        {
            toastService.ShowError(response.Message);
        }
    }
}