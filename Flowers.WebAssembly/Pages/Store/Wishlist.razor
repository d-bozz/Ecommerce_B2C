@page "/wishlist"

@inject ICarritoService carritoServicio
@inject IWishlistService wishlistServicio
@inject IProductoService productoServicio
@inject IVentaService ventaServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject AuthenticationStateProvider authenticationStateProvider;

@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;


         <!-- shopping-cart-area start -->
        <div class="cart-main-area pt-70 pb-75">
            <div class="container">
                <h3 class="page-title">Mi lista de deseos</h3>
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                        <form action="#">
                            <div class="table-content table-responsive wishlist">
                                <table>
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>Producto</th>
                                            <th>Precio unidad</th>
                                            <th>Stock</th>
                                            <th>Cantidad</th>
                                            <th>Subtotal</th>
                                            <th>Agregar al carrito</th>
                                            <th>Eliminar</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                         @if (lista != null && lista.Any())
                                        {
                                            foreach (var item in lista)
                                            {
                                                <tr>
                                                    <td class="product-thumbnail">
                                                    <a href="detalle/@item.Producto.IdProducto"><img src="@item.Producto.Imagen" alt="imagen_producto" width="86" height="86"></a>
                                                    </td>
                                                <td class="product-name"><a href="detalle/@item.Producto.IdProducto">@item.Producto.Nombre</a></td>
                                                <td class="product-price-cart"><span class="amount">$@item.Producto.PrecioOferta</span></td>
                                                <td class="product-name"><a><strong>En Stock</strong></a></td>
                                                <td valign="middle" align="center">
                                                    <div class="btn-group" role="group" aria-label="Basic outlined example">
                                                        <button type="button" class="btn btn-outline-dark" @onclick="(() =>Disminuir(item.Producto.IdProducto))">
                                                            <i class="oi oi-minus"></i>
                                                        </button>
                                                        <input class="form-control" readonly="readonly" style="width:50px" @bind-value="item.Cantidad" />
                                                        <button type="button" class="btn btn-outline-dark" @onclick="(() =>Aumentar(item.Producto.IdProducto))">
                                                            <i class="oi oi-plus"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                                <td class="product-subtotal">$@(item.Cantidad * item.Producto.PrecioOferta)</td>
                                                <td class="pro-cart">
                                                    <button class="btn btn-outline-dark" @onclick="(async () => await AgregarCarrito(item.Producto.IdProducto))">
                                                        <i class="ion-android-cart"></i>
                                                    </button>
                                                </td>
                                                <td >
                                                    <button class="btn btn-outline-dark" @onclick="(async () => await Eliminar(item.Producto.IdProducto))">
                                                        <i class="ion-trash-a"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr class="text-center">
                                                <td colspan="6">
                                                    <div class="alert alert-warning" role="alert">
                                                        No hay productos en la lista de deseos
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>


@code {
    private List<WishlistDTO> lista = new List<WishlistDTO>();
    private ProductoDTO producto;
    private decimal? Total;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task GetWishlist(int idUsuario)
    {
        var response = await wishlistServicio.List(idUsuario);

        if (response.IsCorrect)
        {
            lista = (List<WishlistDTO>)response.Result!;
        }
        else
        {
            lista = new List<WishlistDTO>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var autenticacionState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var usuarioLogueado = autenticacionState.User;

        if (usuarioLogueado.Identity?.IsAuthenticated ?? false)
        {
            var idUsuario = usuarioLogueado.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (int.TryParse(idUsuario, out int idUsuarioInt))
            {
                await GetWishlist(idUsuarioInt);
                ActualizarTotal();
            }
        }
    }

    private void ActualizarTotal()
    {
        if (lista.Any())
        {
            Total = lista.Sum(item => item.Cantidad * item.Producto.PrecioOferta);
        }
        else
        {
            Total = 0;
        }
    }

    private async Task Eliminar(int idProducto)
    {
        WishlistDTO producto = lista.First(i => i.IdProducto == idProducto);

        if (producto != null)
        {
            lista.Remove(producto);
            await wishlistServicio.Delete(producto.IdWishlist);
            ActualizarTotal();
            toastService.ShowSuccess("Producto eliminado de la lista de deseos");
        }
    }

    private async Task AgregarCarrito(int idProducto)
    {
        WishlistDTO wishlistItem = lista.First(i => i.Producto.IdProducto == idProducto);

        if (wishlistItem != null)
        {
            Total = wishlistItem.Producto.PrecioOferta * wishlistItem.Cantidad;
            CarritoDTO carrito = new CarritoDTO()
                {
                    Producto = wishlistItem.Producto,
                    Cantidad = wishlistItem.Cantidad,
                    Precio = wishlistItem.Producto.Precio,
                    Total = Total
                };

            await carritoServicio.AddCarrito(carrito);
            await Eliminar(idProducto);
            toastService.ShowSuccess("Producto agregado al carrito");
        }
    }


    private void Disminuir(int id)
    {
        WishlistDTO item = lista.First(i => i.Producto.IdProducto == id);

        if (item.Cantidad - 1 > 0)
        {
            decimal? precioFinal = (item.Producto.PrecioOferta != 0 && item.Producto.PrecioOferta < item.Producto.Precio) ? item.Producto.PrecioOferta : item.Producto.Precio;

            item.Cantidad--;
            ActualizarTotal();
        }
    }

    private void Aumentar(int id)
    {
        WishlistDTO item = lista.First(i => i.Producto.IdProducto == id);

        decimal? precioFinal = (item.Producto.PrecioOferta != 0 && item.Producto.PrecioOferta < item.Producto.Precio) ? item.Producto.PrecioOferta : item.Producto.Precio;

        item.Cantidad++;
        ActualizarTotal();
    }
}