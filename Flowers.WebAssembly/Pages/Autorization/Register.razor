@page "/registro"
@layout LoginLayout
@inject IUsuarioService _usuarioService
@inject NavigationManager _navServicio
@inject IToastService toastService


        <div class="login-register-area pt-70 pb-75">
            <div class="container">
                <div class="row">
                    <div class="col-lg-7 col-md-12 ms-auto me-auto">
                        <div class="login-register-wrapper">
                            <div class="login-register-tab-list nav">
                                <a class="active" data-bs-toggle="tab">
                                    <h4> Registro </h4>
                                </a>
                            </div>
                            <div class="tab-content">
                                <div id="lg1" class="tab-pane active">
                                    <div class="login-form-container">
                                        <div class="login-register-form">
                                            <EditForm Model="modelo" OnValidSubmit="SaveChanges">
                                                <input type="text" name="nombreCompleto" id="nombreCompleto" placeholder="Nombre completo" @bind-value="modelo.NombreCompleto"/>
                                                <ValidationMessage For="@(()=>modelo.NombreCompleto)" />

                                                <input type="email" name="correo" placeholder="Correo" @bind-value="modelo.Correo">
                                                <ValidationMessage For="@(()=>modelo.Correo)" />

                                                <div class="password-input">
                                                    <input id="inputPassword" type="@((modelo.MostrarClave) ? "text" : "password")" placeholder="Clave" @bind-value="modelo.Clave" autocomplete="off" />
                                                    <i class="@((modelo.MostrarClave) ? "ion-eye" : "ion-eye-disabled")" @onclick="TogglePasswordVisibility"></i>
                                                </div>    
                                                <ValidationMessage For="@(()=>modelo.Clave)" />

                                                <div class="password-input">
                                                    <input id="inputPasswordConfirm" type="@((modelo.MostrarConfirmacionClave) ? "text" : "password")" placeholder="Confirmación de clave" @bind-value="modelo.ConfirmarClave" autocomplete="off" />
                                                    <i class="@((modelo.MostrarConfirmacionClave) ? "ion-eye" : "ion-eye-disabled")" @onclick="ToggleConfirmPasswordVisibility"></i>
                                                </div>
                                                <ValidationMessage For="@(()=>modelo.ConfirmarClave)" />

                                                    <div class="button-box">
                                                        <div class="login-toggle-btn">
                                                        <a href="login">¿Ya tienes una cuenta? Login</a>
                                                        </div>
                                                        <button type="submit"><span>Registrarse</span></button>
                                                    </div>
                                            </EditForm>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


@code {
    private UsuarioDTO modelo = new UsuarioDTO();

    private async Task SaveChanges()
    {
        if (modelo.Clave != modelo.ConfirmarClave)
        {
            toastService.ShowWarning("Las contraseñas no coinciden");
            return;
        }

        modelo.Rol = "Cliente";
        var response = await _usuarioService.Create(modelo);
        if (response.IsCorrect)
        {
            toastService.ShowSuccess("Su cuenta ha sido creada");
            _navServicio.NavigateTo("/login");
        }
        else
        {
            toastService.ShowError("No se pudo crear su cuente, intente más tarde");
        }
    }

    private void TogglePasswordVisibility()
    {
        modelo.MostrarClave = !modelo.MostrarClave;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        modelo.MostrarConfirmacionClave = !modelo.MostrarConfirmacionClave;
    }
}
