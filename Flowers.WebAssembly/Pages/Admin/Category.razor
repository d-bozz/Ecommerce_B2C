@page "/categoria"
@page "/categoria/{id:int}"
@layout _DashboardLayout

@inject ICategoriaService categoriaService;
@inject IToastService toastService;
@inject NavigationManager _navService;

@attribute [Authorize(Roles = "Administrador")];


<main>
    <div class="container-fluid px-4">
        <h1 class="mt-4">Categoria</h1>
        <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item"><a href="dashboard">Dashboard</a></li>
            <li class="breadcrumb-item active">Categoria</li>
        </ol>
        <div class="card mb-4">
            <div class="card-body">
                <div class="row justify-content-center  mt-3">
                    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@titulo</p>
                </div>
                <div class="row justify-content-center  mt-3">
                    <div class="col-sm-12 col-md-8 col-xl-10">

                        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <div class="input-group mb-3">
                                <span class="input-group-text bg-light">Nombre</span>
                                <input type="text" class="form-control" @bind-value="modelo.Nombre">
                                <ValidationMessage For="@(()=>modelo.Nombre)" />
                            </div>
                            <div class="mb-3">
                                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                                <a href="/categorias" class="btn btn-secondary" style="width:130px">Volver</a>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div style="height: 100vh"></div>
        <div class="card mb-4"><div class="card-body">When scrolling, the navigation stays at the top of the page. This is the end of the static navigation demo.</div></div>
    </div>
</main>



@code {
    [Parameter] public int Id { get; set; }
    private string titulo = "Nueva Categoria";
    private string boton = "Crear";
    private CategoriaDTO modelo = new CategoriaDTO();


    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            titulo = "Editar Categoria";
            boton = "Actualizar";

            var response = await categoriaService.Get(Id);
            if (response.IsCorrect!)
            {
                modelo = (CategoriaDTO)response.Result!;
            }
            else
                toastService.ShowWarning(response.Message!);
        }
    }


    private async Task GuardarCambios()
    {

        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await categoriaService.Edit(modelo);
            if (response.IsCorrect)
                mensaje = "Categoria fue modificada";
            else
            {
                respuesta = false;
                mensaje = "No se pudo editar";
            }
        }
        else
        {
            var response = await categoriaService.Create(modelo);
            if (response.IsCorrect)
                mensaje = "Categoria fue creada";
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }

        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navService.NavigateTo("/categorias");
        }
        else
            toastService.ShowError(mensaje);
    }
}