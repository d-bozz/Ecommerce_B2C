@page "/usuarios"
@layout _DashboardLayout

@inject IUsuarioService usuarioService;
@inject IToastService toastService;
@inject SweetAlertService Swal;

@attribute [Authorize(Roles = "Administrador")];

<main>
    <div class="container-fluid px-4">
        <h1 class="mt-4">Usuarios</h1>
        <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item"><a href="dashboard">Dashboard</a></li>
            <li class="breadcrumb-item active">Usuarios</li>
        </ol>

        <div class="mb-4">
            <a class="btn btn-primary" href="/producto"><i class="oi oi-plus fs-5"></i>Agregar Nuevo Usuario</a>
        </div>

        <div class="card mb-8">
            <div class="card-body">
                @if (lista != null)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Nombre</th>
                                <th scope="col">Correo</th>
                                <th scope="col">Rol</th>
                                <th scope="col">Modificar</th>
                                <th scope="col">Eliminar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in lista)
                            {
                                <tr>
                                    <th scope="row">@item.IdUsuario</th>
                                    <td>@item.NombreCompleto</td>
                                    <td>@item.Correo</td>
                                    <td>@item.Rol</td>
                                    <td><a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/producto/@item.IdUsuario"><i class="oi oi-pencil fs-5"></i></a></td>
                                    <td><a class="col-5 btn btn-sm btn-outline-danger mt-auto" @onclick="(async () => await Delete(item))"><i class="oi oi-trash fs-5"></i></a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>
        </div>

        <div style="height: 100vh"></div>
        <div class="card mb-4">
            <div class="card-body">When scrolling, the navigation stays at the top of the page. This is the end of the static navigation demo.</div>
        </div>
    </div>
</main>

@code {
    private List<UsuarioDTO>? lista = null;
    private string buscar = "";

    private async Task GetUsuarios(string Valor = "")
    {
        var response = await usuarioService.List("Administrador", Valor);
        if (response.IsCorrect)
        {
            lista = (List<UsuarioDTO>)response.Result!;
        }
        else
        {
            lista = new List<UsuarioDTO>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUsuarios();    
    }

    private async Task Delete(UsuarioDTO model)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar usuario: {model.NombreCompleto}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var response = await usuarioService.Delete(model.IdUsuario);

            if (response.IsCorrect)
            {
                await GetUsuarios();
                toastService.ShowSuccess("Usuario fue eliminado");
            }
            else
                toastService.ShowSuccess(response.Message!);
        }
    }
}
